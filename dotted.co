root = do -> this



# Find an Underscore-substitute
_ = root._
if typeof _ != 'function' and typeof require == 'function'
    for mod of <[ lodash underscore ]>
        try
            _ := require mod
            break if typeof _ == 'function'
        catch ex

unless typeof _ == 'function'
    throw new Error "Unable to find Underscore or Lodash!"



### Helpers

{
    hasOwnProperty : hasOwn
    toString       : objToString
} = {}

isPlainObject = _.isPlainObject ? (obj) ->
    # Must be an Object.
    # Because of IE, we also have to check the presence of the constructor property.
    # Make sure that DOM nodes and window objects don't pass through, as well.
    if not obj or objToString.call(obj) !== "[object Object]" or obj.nodeType or obj.setInterval
        return false
    
    # Not own constructor property must be Object
    return false if obj.constructor
        and not hasOwn.call(obj, 'constructor')
        and not hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')
    
    # Own properties are enumerated firstly, so to speed up,
    # if last one is own, then all properties are own.
    for key in obj then ;
    return key is undefined or hasOwn.call obj, key




/**
 * @private
 * Tombstone object, used internally to mark deleted, non-passthrough keys.
 */
const TOMBSTONE = {}


/**
 * Default options for delegate-accessor functions.
 */
DEFAULT_DELEGATE_OPTIONS =
    getter  : 'get'
    setter  : 'set'
    deleter : 'delete'

/**
 * Default options for nested-accessor functions.
 */
DEFAULT_NESTED_OPTIONS = {
    -ensure
    tombstone: TOMBSTONE
    ...DEFAULT_DELEGATE_OPTIONS
}




### Delegating Accessors

/**
 * Tests whether all values are contained in the given collection.
 * 
 * @param {Array|Object|String} collection Collection to be tested.
 * @param {Array} ...values Values for which to look.
 * @returns {Boolean}
 */
function isMember(obj, v)
    for v of values
        return false unless _.contains obj, v
    true


/**
 * Gets the value at `key` from the object if present, returning `def` otherwise.
 * 
 * @param {Object} object Object on which to perform lookup.
 * @param {String|Array} key Key to get.
 * @param {*} [def=undefined] Default value.
 * @param {Object} [opts] Options.
 * @returns {*} Value or default.
 */
function get(obj, key, def, opts)
    return unless obj?
    getter = opts?.getter or 'get'
    if typeof obj[getter] is 'function'
        obj[getter] key, def, opts
    else
        if obj[key] is not undefined then obj[key] else def


/**
 * Puts the given value to `key` on the given target object.
 * 
 * @param {Object} target Target object for the set.
 * @param {String|Array|Object} key The key to set. If an object is supplied here, each key will be set with its value on the target object.
 * @param {*} [value] Value to set at `key`. Omit this if an object of KV-pairs was passed as `key`.
 * @param {Object} [opts] Options.
 * @returns {Object} The target object.
 */
function set(obj, key, value, opts)
    return unless obj?
    if key? and _.isObject(key)
        [values, opts] = [key, value]
    else
        values = { "#key": value }
    
    setter = opts?.setter or 'set'
    if typeof obj[setter] is 'function'
        for key, value in values
            obj[setter] key, value, opts
    else
        for key, value in values
            obj[key] = value
    
    obj


/**
 * Deletes `key` from the target object.
 * 
 * @param {Object} target Target object.
 * @param {String} key Key to be deleted.
 * @param {Object} [opts] Options.
 * @returns {*} Value at `key` prior to being removed from the target.
 */
function del(obj, key, opts)
    return unless obj?
    deleter = opts?.deleter or 'delete'
    if typeof obj[deleter] is 'function'
        obj[deleter] key, opts
    else
        delete obj[key]



### Nested Acccessors

/**
 * Searches a hierarchical object for a given subkey specified in dotted-property syntax,
 * respecting sub-object accessor-methods (e.g., 'get', 'set') if they exist.
 * 
 * @param {Object} base The object to serve as the root of the property-chain.
 * @param {Array|String} chain The property-chain to lookup.
 * @param {Object} [opts] Options:
 * @param {Boolean} [opts.ensure=false] If true, intermediate keys that are `null` or
 *  `undefined` will be filled in with a new empty object `{}`, ensuring the get will
 *   return valid metadata.
 * @param {String} [opts.getter="get"] Name of the sub-object getter method use if it exists.
 * @param {String} [opts.setter="set"] Name of the sub-object setter method use if it exists.
 * @param {String} [opts.deleter="delete"] Name of the sub-object deleter method use if it exists.
 * @param {Object} [opts.tombstone=TOMBSTONE] Sentinel value to be interpreted as no-passthrough,
 *  forcing the lookup to fail and return `undefined`. TODO: opts.returnTombstone
 * @returns {undefined|Object} If found, the object is of the form 
 *  `{ key: Qualified key name, obj: Parent object of key, val: Value at obj[key], opts: Options }`. 
 *  Otherwise `undefined`.
 */
function getNestedMeta(obj, chain, opts={})
    chain = chain.split('.') if typeof chain is 'string'
    len   = chain.length - 1
    opts  = { ...DEFAULT_NESTED_OPTIONS, ...opts }
    
    _.reduce do
        chain
        (obj, key, idx) ->
            return unless obj?
            val = get obj, key, undefined, opts
            
            if val is opts.tombstone
                return unless ops.ensure
                val = undefined
            
            if idx is len
                return { key, val, obj, opts }
            if not val? and opts.ensure
                val = {}
                set obj, key, val, opts
            val
        obj


/**
 * Searches a hierarchical object for a given subkey specified in dotted-property syntax.
 * 
 * @param {Object} rootObj The object to serve as the root of the property-chain.
 * @param {Array|String} chain The property-chain to lookup.
 * @param {Any} [def=undefined] Value to return if lookup fails.
 * @param {Object} [opts] Options to pass to `{@link #getNestedMeta}`.
 * @returns {null|Object} If found, returns the value, and otherwise `default`.
 */
function getNested(rootObj, chain, def, opts)
    meta = getNestedMeta rootObj, chain, opts
    return def if meta?.val is undefined
    meta.val


/**
 * Searches a hierarchical object for a given subkey specified in
 * dotted-property syntax, setting it with the provided value if found.
 * 
 * @param {Object} rootObj The object to serve as the root of the property-chain.
 * @param {Array|String} chain The property-chain to lookup.
 * @param {Any} value The value to set.
 * @param {Object} [opts] Options to pass to `{@link #getNestedMeta}`.
 * @returns {undefined|Any} If found, returns the old value, and otherwise `undefined`.
 */
function setNested(rootObj, chain, value, opts)
    return unless meta = getNestedMeta rootObj, chain, opts
    {obj, key, val, opts} = meta
    set obj, key, value, opts
    val


/**
 * Searches a hierarchical object for a potentially-nested key and removes it.
 * 
 * @param {Object} rootObj The root of the lookup chain.
 * @param {String|Array<String>} chain The chain of property-keys to navigate.
 *  Nested keys can be supplied as a dot-delimited string (e.g., `deleteNested(obj, 'user.name')`),
 *  or an array of strings, allowing for keys with dots (eg.,
 *  `deleteNested(obj, ['products', 'by_price', '0.99'])`).
 * @param {Object} [opts] Options to pass to `{@link #getNestedMeta}`.
 * @returns {undefined|Any} The old value if found; otherwise `undefined`.
 */
function deleteNested(rootObj, chain, opts)
    return unless meta = getNestedMeta rootObj, chain, opts
    {obj, key, val, opts} = meta
    del obj, key, opts
    val



### Collection Utilities


/**
 * Recursively merges together any number of donor objects into the target object.
 * Modified from `jQuery.extend()`.
 * 
 * @param {Object} target Target object of the merge.
 * @param {Object} ...donors Donor objects.
 * @returns {Object} 
 */
function mergeNested(target={}, ...donors)
    # Handle case when target is a string or something (possible in deep copy)
    unless typeof target of <[ object function ]>
        target = if _.isArray donors[0] then [] else {}
    
    for donor of donors
        # Only deal with non-null/undefined values
        continue unless donor?
        
        # Extend the base object
        _.forEach donor, (value, key) ->
            current = target[key]
            
            # Prevent never-ending loop
            return if target is value
            
            # Recurse if we're merging plain objects or arrays
            if value and ( isPlainObject(value) or (valueIsArray = _.isArray(value)) )
                if valueIsArray
                    current = [] unless _.isArray current
                else
                    current = {} unless current and typeof current is 'object'
                
                # Never move original objects, clone them
                set target, key, mergeNested(current, value)
                
            # Don't bring in undefined values
            else if value is not undefined
                set target, key, value
    
    # Return the modified object
    target




### Exports

unless dotted = module?.exports or exports?
    dotted = root.dotted = {}

dotted import {
    isMember, isPlainObject
    get, set, delete:del
    getNested, setNested, deleteNested
    getNestedMeta, mergeNested
}
